package dao;

import java.sql.*;
import java.util.ArrayList;
import conection.ConnectionFactory;
import model.Ferramenta;

public class FerramentaDAO {

    public ArrayList<Ferramenta> MinhaLista = new ArrayList<>();

    public FerramentaDAO() {
    }

    public int maiorID() throws SQLException {
        int maiorID = 0;
        try {
            Connection con = ConnectionFactory.getConnection();
            Statement stmt = con.createStatement();
            ResultSet res = stmt.executeQuery("SELECT MAX(id) AS id FROM tb_Ferramentas");
            if (res.next()) {
                maiorID = res.getInt("id");
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return maiorID;
    }

    // Retorna a Lista de Amigos(objetos)
    public ArrayList<Ferramenta> getMinhaLista() {
        MinhaLista.clear();

        try {
            Connection con = ConnectionFactory.getConnection();
            Statement stmt = con.createStatement();
            ResultSet res = stmt.executeQuery("SELECT * FROM tb_Ferramentas");
            while (res.next()) {
                String nome = res.getString("nome");
                String marca = res.getString("marca");
                Double custo = res.getDouble("custo");

                

                Ferramenta objeto = new Ferramenta(nome, marca, custo);
                MinhaLista.add(objeto);
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return MinhaLista;
    }

    // Cadastra novo amigo
    public boolean insertFerramentaBD(Ferramenta objeto) {
        String sql = "INSERT INTO tb_Ferramentas(nome, marca, custo) VALUES(?, ?, ?)";

        try {
            Connection con = ConnectionFactory.getConnection();
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, objeto.getNome());
            stmt.setString(2, objeto.getMarca());
            stmt.setDouble(3, objeto.getCusto());


            stmt.execute();
            stmt.close();
            con.close();
            return true;
        } catch (SQLException erro) {
            throw new RuntimeException(erro);
        }
    }

    // Deleta um amigo específico pelo seu nome
    public boolean deleteFerramentaBD(String nome) {
        try {
            Connection con = ConnectionFactory.getConnection();
            Statement stmt = con.createStatement();
            stmt.executeUpdate("DELETE FROM tb_Ferramentas WHERE nome = '" + nome + "'");
            stmt.close();
            con.close();
        } catch (SQLException erro) {
            erro.printStackTrace();
        }
        return true;
    }

    // Edita um amigo específico pelo seu nome
    public boolean updateFerramentaBD(Ferramenta objeto) {
        String sql = "UPDATE tb_Ferramentas SET telefone = ? WHERE nome = ?";

        try {
            Connection con = ConnectionFactory.getConnection();
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, objeto.getMarca());
            stmt.setString(2, objeto.getNome());
             stmt.setDouble(3, objeto.getCusto());

            stmt.execute();
            stmt.close();
            con.close();
            return true;
        } catch (SQLException erro) {
            throw new RuntimeException(erro);
        }
    }

    // Carrega um amigo pelo nome
    public Ferramenta carregaFerramentaBD(String nome) {
        Ferramenta objeto = new Ferramenta();

        try {
            Connection con = ConnectionFactory.getConnection();
            Statement stmt = con.createStatement();
            ResultSet res = stmt.executeQuery("SELECT * FROM tb_Ferramentas WHERE nome = '" + nome + "'");
            if (res.next()) {
                objeto.setNome(res.getString("nome"));
                objeto.setMarca(res.getString("marca"));
                objeto.setCusto(res.getDouble("custo"));
                
            }
            stmt.close();
            con.close();
        } catch (SQLException erro) {
            erro.printStackTrace();
        }
        return objeto;
    }

    // Carrega um amigo pelo ID
    public Ferramenta carregaFerramenta(int ferramentaId) {
        Ferramenta objeto = new Ferramenta();

        try {
            Connection con = ConnectionFactory.getConnection();
            PreparedStatement stmt = con.prepareStatement("SELECT * FROM tb_Ferramentas WHERE id = ?");
            stmt.setInt(1, ferramentaId);
            ResultSet res = stmt.executeQuery();
            if (res.next()) {
                objeto.setNome(res.getString("nome"));
                objeto.setMarca(res.getString("marca"));
                objeto.setCusto(res.getDouble("custo"));
            }
            stmt.close();
            con.close();
        } catch (SQLException erro) {
            erro.printStackTrace();
        }
        return objeto;
    }

    // Obtém o ID de um amigo pelo nome
    public int getFerramentaId(String nome) {
        int ferramentaId = 0;
        try {
            Connection con = ConnectionFactory.getConnection();
            PreparedStatement stmt = con.prepareStatement("SELECT id FROM tb_Ferramentas WHERE nome = ?");
            stmt.setString(1, nome);
            ResultSet res = stmt.executeQuery();
            if (res.next()) {
                ferramentaId = res.getInt("id");
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return ferramentaId;
    }

    
}
