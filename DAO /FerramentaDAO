package dao;


import model.Ferramenta;
import java.sql.*;
import java.util.ArrayList;
import conection.ConnectionFactory;

public class FerramentaDAO {

    public static ArrayList<Ferramenta> MinhaLista = new ArrayList<Ferramenta>();

    public FerramentaDAO() {
    }

    public int maiorID() throws SQLException {
        int maiorID = 0;
        try {
            Statement stmt = this.getConexao().createStatement();
            ResultSet res = stmt.executeQuery("SELECT MAX(id) AS id FROM tb_Ferramentas");
            if (res.next()) {
                maiorID = res.getInt("id");
            }
            stmt.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return maiorID;
    }

    public Connection getConexao() {
        Connection connection = null;  
        try {
            String driver = "com.mysql.cj.jdbc.Driver";
            Class.forName(driver);

            String url = "jdbc:mysql://localhost:8111/bancodadosa3";
            String user = "root";
            String password = "";

            connection = DriverManager.getConnection(url, user, password);

            if (connection != null) {
                System.out.println("Status: Conectado!");
            } else {
                System.out.println("Status: NÃO CONECTADO!");
            }
        } catch (ClassNotFoundException e) {
            System.out.println("O driver não foi encontrado. " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("Não foi possível conectar...");
        }
        return connection;
    }

    // Retorna a Lista de Ferramentas (objetos)
    public ArrayList<Ferramenta> getMinhaLista() {
        MinhaLista.clear(); 

        try {
            Statement stmt = this.getConexao().createStatement();
            ResultSet res = stmt.executeQuery("SELECT * FROM tb_Ferramentas");
            while (res.next()) {    
                String nome = res.getString("nome");
                String marca = res.getString("marca");
                double custo = res.getDouble("custo");

                Ferramenta objeto = new Ferramenta(nome, marca, custo);
                MinhaLista.add(objeto);
            }
            stmt.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return MinhaLista;
    }

    // Cadastra nova ferramenta
    public boolean insertFerramentaBD(Ferramenta objeto) {
        String sql = "INSERT INTO tb_Ferramentas(nome, marca, custo) VALUES(?, ?, ?)";

        try {
            try (PreparedStatement stmt = this.getConexao().prepareStatement(sql)) {
                stmt.setString(1, objeto.getNome());
                stmt.setString(2, objeto.getMarca());
                stmt.setDouble(3, objeto.getCusto());

                stmt.execute();
            }
            return true;
        } catch (SQLException erro) {
            throw new RuntimeException(erro);
        }
    }

    // Deleta uma ferramenta específica pelo seu nome
    public boolean deleteFerramentaBD(String nome) {
        try {
            Statement stmt = this.getConexao().createStatement();
            stmt.executeUpdate("DELETE FROM tb_Ferramentas WHERE nome = '" + nome + "'");
            stmt.close();
        } catch (SQLException erro) {
            erro.printStackTrace();
        }
        return true;
    }

    // Edita uma ferramenta específica pelo seu nome
    public boolean updateFerramentaBD(Ferramenta objeto) {
        String sql = "UPDATE tb_Ferramentas SET marca = ?, custo = ? WHERE nome = ?";

        try {
            PreparedStatement stmt = this.getConexao().prepareStatement(sql);
            stmt.setString(1, objeto.getMarca());
            stmt.setDouble(2, objeto.getCusto());
            stmt.setString(3, objeto.getNome());

            stmt.execute();
            stmt.close();
            return true;
        } catch (SQLException erro) {
            throw new RuntimeException(erro);
        }
    }

    public Ferramenta carregaFerramenta(String nome) {
        Ferramenta objeto = new Ferramenta();

        try {
            Statement stmt = this.getConexao().createStatement();
            ResultSet res = stmt.executeQuery("SELECT * FROM tb_Ferramentas WHERE nome = '" + nome + "'");
            if (res.next()) {
                objeto.setNome(res.getString("nome"));
                objeto.setMarca(res.getString("marca"));
                objeto.setCusto(res.getDouble("custo"));
            }
            stmt.close();
        } catch (SQLException erro) {
            erro.printStackTrace();
        }
        return objeto;
    }

    public void salvar(Ferramenta ferramenta) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    public Ferramenta carregaFerramenta(int ferramentaId) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    public int getFerramentaId(String nomeFerramenta) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }


}
