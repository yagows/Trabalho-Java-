package dao;

import java.sql.*;
import java.util.ArrayList;
import conection.ConnectionFactory;
import model.Amigo;

public class AmigoDAO {

    public ArrayList<Amigo> MinhaLista = new ArrayList<>();

    public AmigoDAO() {
    }

    public int maiorID() throws SQLException {
        int maiorID = 0;
        try {
            Connection con = ConnectionFactory.getConnection();
            Statement stmt = con.createStatement();
            ResultSet res = stmt.executeQuery("SELECT MAX(id) AS id FROM tb_Amigos");
            if (res.next()) {
                maiorID = res.getInt("id");
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return maiorID;
    }

    // Retorna a Lista de Amigos(objetos)
    public ArrayList<Amigo> getMinhaLista() {
        MinhaLista.clear();

        try {
            Connection con = ConnectionFactory.getConnection();
            Statement stmt = con.createStatement();
            ResultSet res = stmt.executeQuery("SELECT * FROM tb_Amigos");
            while (res.next()) {
                String nome = res.getString("nome");
                String telefone = res.getString("telefone");

                Amigo objeto = new Amigo(nome, telefone);
                MinhaLista.add(objeto);
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return MinhaLista;
    }

    // Cadastra novo amigo
    public boolean insertAmigoBD(Amigo objeto) {
        String sql = "INSERT INTO tb_Amigos(nome, telefone) VALUES(?, ?)";

        try {
            Connection con = ConnectionFactory.getConnection();
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, objeto.getNome());
            stmt.setString(2, objeto.getTelefone());

            stmt.execute();
            stmt.close();
            con.close();
            return true;
        } catch (SQLException erro) {
            throw new RuntimeException(erro);
        }
    }

    // Deleta um amigo específico pelo seu nome
    public boolean deleteAmigoBD(String nome) {
        try {
            Connection con = ConnectionFactory.getConnection();
            Statement stmt = con.createStatement();
            stmt.executeUpdate("DELETE FROM tb_Amigos WHERE nome = '" + nome + "'");
            stmt.close();
            con.close();
        } catch (SQLException erro) {
            erro.printStackTrace();
        }
        return true;
    }

    // Edita um amigo específico pelo seu nome
    public boolean updateAmigoBD(Amigo objeto) {
        String sql = "UPDATE tb_Amigos SET telefone = ? WHERE nome = ?";

        try {
            Connection con = ConnectionFactory.getConnection();
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, objeto.getTelefone());
            stmt.setString(2, objeto.getNome());

            stmt.execute();
            stmt.close();
            con.close();
            return true;
        } catch (SQLException erro) {
            throw new RuntimeException(erro);
        }
    }

    // Carrega um amigo pelo nome
    public Amigo carregaAmigoBD(String nome) {
        Amigo objeto = new Amigo();

        try {
            Connection con = ConnectionFactory.getConnection();
            Statement stmt = con.createStatement();
            ResultSet res = stmt.executeQuery("SELECT * FROM tb_Amigos WHERE nome = '" + nome + "'");
            if (res.next()) {
                objeto.setNome(res.getString("nome"));
                objeto.setTelefone(res.getString("telefone"));
            }
            stmt.close();
            con.close();
        } catch (SQLException erro) {
            erro.printStackTrace();
        }
        return objeto;
    }

    // Carrega um amigo pelo ID
    public Amigo carregaAmigo(int amigoId) {
        Amigo objeto = new Amigo();

        try {
            Connection con = ConnectionFactory.getConnection();
            PreparedStatement stmt = con.prepareStatement("SELECT * FROM tb_Amigos WHERE id = ?");
            stmt.setInt(1, amigoId);
            ResultSet res = stmt.executeQuery();
            if (res.next()) {
                objeto.setNome(res.getString("nome"));
                objeto.setTelefone(res.getString("telefone"));
            }
            stmt.close();
            con.close();
        } catch (SQLException erro) {
            erro.printStackTrace();
        }
        return objeto;
    }

    // Obtém o ID de um amigo pelo nome
    public int getAmigoId(String nome) {
        int amigoId = 0;
        try {
            Connection con = ConnectionFactory.getConnection();
            PreparedStatement stmt = con.prepareStatement("SELECT id FROM tb_Amigos WHERE nome = ?");
            stmt.setString(1, nome);
            ResultSet res = stmt.executeQuery();
            if (res.next()) {
                amigoId = res.getInt("id");
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return amigoId;
    }
}
